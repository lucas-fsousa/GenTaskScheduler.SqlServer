// <auto-generated />
using System;
using GenTaskScheduler.SqlServer.Internal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GenTaskScheduler.SqlServer.Migrations
{
    [DbContext(typeof(GenSqlServerContext))]
    [Migration("20250502025928_IncTriggerDescription")]
    partial class IncTriggerDescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Common.CalendarEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarTriggerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CalendarTriggerId");

                    b.ToTable("CalendarEntries");
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Common.ScheduledTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoDelete")
                        .HasColumnType("bit");

                    b.Property<byte[]>("BlobArgs")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExecutionStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ScheduledTasks");
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Common.TaskExecutionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("ResultBlob")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TriggerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskExecutionsHistory");
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Triggers.BaseTrigger", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("ExecutionInterval")
                        .HasColumnType("time");

                    b.Property<int?>("MaxExecutions")
                        .HasColumnType("int");

                    b.Property<bool>("ShouldAutoDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TriggerDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Triggers", (string)null);

                    b.HasDiscriminator<string>("TriggerType").HasValue("BaseTrigger");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Triggers.CalendarTrigger", b =>
                {
                    b.HasBaseType("GenTaskScheduler.Core.Models.Triggers.BaseTrigger");

                    b.HasDiscriminator().HasValue("Calendar");
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Triggers.CronTrigger", b =>
                {
                    b.HasBaseType("GenTaskScheduler.Core.Models.Triggers.BaseTrigger");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("Cron");
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Triggers.DayWeekMonthTrigger", b =>
                {
                    b.HasBaseType("GenTaskScheduler.Core.Models.Triggers.BaseTrigger");

                    b.Property<string>("DaysOfMonth")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<string>("MonthsOfYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("TimeOfDay")
                        .HasColumnType("time");

                    b.HasDiscriminator().HasValue("DailyWeeklyMonthly");
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Triggers.IntervalTrigger", b =>
                {
                    b.HasBaseType("GenTaskScheduler.Core.Models.Triggers.BaseTrigger");

                    b.Property<DateTime>("InitialExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RepeatIntervalMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Interval");
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Triggers.OnceTrigger", b =>
                {
                    b.HasBaseType("GenTaskScheduler.Core.Models.Triggers.BaseTrigger");

                    b.Property<bool>("Executed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Once");
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Common.CalendarEntry", b =>
                {
                    b.HasOne("GenTaskScheduler.Core.Models.Triggers.CalendarTrigger", "CalendarTrigger")
                        .WithMany("CalendarEntries")
                        .HasForeignKey("CalendarTriggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarTrigger");
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Common.TaskExecutionHistory", b =>
                {
                    b.HasOne("GenTaskScheduler.Core.Models.Common.ScheduledTask", "Task")
                        .WithMany("ExecutionHistory")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Triggers.BaseTrigger", b =>
                {
                    b.HasOne("GenTaskScheduler.Core.Models.Common.ScheduledTask", "Task")
                        .WithMany("Triggers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Common.ScheduledTask", b =>
                {
                    b.Navigation("ExecutionHistory");

                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("GenTaskScheduler.Core.Models.Triggers.CalendarTrigger", b =>
                {
                    b.Navigation("CalendarEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
